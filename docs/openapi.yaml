openapi: 3.0.3
info:
  title: Music info
  version: 0.0.1
servers:
- url: /
tags:
- name: songs
  description: Работа с песнями
paths:
  /info:
    get:
      tags:
      - songs
      parameters:
      - name: group
        in: query
        required: true
        style: form
        explode: true
        schema:
          type: string
      - name: song
        in: query
        required: true
        style: form
        explode: true
        schema:
          type: string
      responses:
        "200":
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SongDetail'
        "400":
          description: Bad request
        "500":
          description: Internal server error
  /songs:
    post:
      tags:
      - songs
      summary: Получение песен
      description: Получение данных библиотеки с фильтрацией по всем полям и пагинацией
      parameters:
      - name: offset
        in: query
        description: Количество пропущенных песен перед выводом
        required: false
        style: form
        explode: true
        schema:
          minimum: 0
          type: integer
          default: 0
      - name: limit
        in: query
        description: Количество выводимых песен
        required: false
        style: form
        explode: true
        schema:
          minimum: 1
          type: integer
          default: 5
      requestBody:
        content:
          aplication/json:
            schema:
              $ref: '#/components/schemas/SongFilter'
        required: true
      responses:
        "200":
          description: Успешное получение
          content:
            aplication/json:
              schema:
                $ref: '#/components/schemas/Songs'
        "400":
          description: Bad request
        "500":
          description: Ошибка со стороны сервера
  /song/lyric/{id}:
    get:
      tags:
      - songs
      summary: Получение текста песни
      description: Получение текста песни с пагинацией по куплетам
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          example: 1
      - name: offset
        in: query
        description: Количество пропущенных куплетов перед выводом
        required: false
        style: form
        explode: true
        schema:
          minimum: 0
          type: integer
          default: 0
      - name: limit
        in: query
        description: Количество выводимых куплетов
        required: false
        style: form
        explode: true
        schema:
          minimum: 1
          type: integer
          default: 5
      responses:
        "200":
          description: Успешное получение текста песни
          content:
            aplication/json:
              schema:
                $ref: '#/components/schemas/SongLyric'
        "400":
          description: Bad request
        "500":
          description: Ошибка со стороны сервера
  /song/delete/{id}:
    post:
      tags:
      - songs
      summary: Удаление песни
      parameters:
      - name: id
        in: path
        description: ID песни
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          example: 1
      responses:
        "200":
          description: Успешное удаление песни
          content:
            aplication/json:
              schema:
                $ref: '#/components/schemas/SongID'
        "400":
          description: Не валидный ID песни
        "500":
          description: Ошибка со стороны сервера
  /song/update/{id}:
    post:
      tags:
      - songs
      summary: Изменение данных песни
      parameters:
      - name: id
        in: path
        description: ID песни
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          example: 1
      requestBody:
        content:
          aplication/json:
            schema:
              $ref: '#/components/schemas/SongUpdate'
        required: true
      responses:
        "200":
          description: Успешное обновление данных песни
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SongID'
        "400":
          description: Не валидный ID песни
        "500":
          description: Ошибка со стороны сервера
  /song/add:
    post:
      tags:
      - songs
      summary: Добавление песни
      description: Добавление песни с возможностью добавления деталей песни
      requestBody:
        content:
          aplication/json:
            schema:
              $ref: '#/components/schemas/SongAdd'
        required: true
      responses:
        "200":
          description: Успешное добавление песни
          content:
            aplication/json:
              schema:
                $ref: '#/components/schemas/SongID'
        "400":
          description: Не валидный запрос
        "500":
          description: Ошибка со стороны сервера
components:
  schemas:
    Song:
      type: object
      properties:
        group:
          type: string
          example: Muse
        song:
          type: string
          example: Supermassive Black Hole
        detail:
          $ref: '#/components/schemas/SongDetail'
    Songs:
      type: object
      properties:
        offset:
          minimum: 0
          type: integer
          description: Количество пропущенных песен
          default: 0
        limit:
          minimum: 1
          type: integer
          description: Количество песен на странице
          default: 5
        songs:
          type: array
          items:
            $ref: '#/components/schemas/Song'
    SongAdd:
      required:
      - group
      - song
      type: object
      properties:
        group:
          type: string
          example: Muse
        song:
          type: string
          example: Supermassive Black Hole
        detail:
          $ref: '#/components/schemas/SongDetail'
    SongFilter:
      type: object
      properties:
        group:
          type: string
          description: Сортировка по группа
          example: Muse
        releaseDate:
          type: string
          description: Дата выпуска
          format: date
    SongUpdate:
      minProperties: 1
      type: object
      properties:
        title:
          type: string
          description: Изменение названия
          example: Supermassive Black Hole
        releaseDate:
          type: string
          description: Изменение даты выпуска
          example: 16.07.2006
        text:
          type: string
          description: Изменение текста песни
          example: Ala la
        link:
          type: string
          description: Изменение ссылки
          example: https://www.youtube.com/watch?v=Xsp3_a-PMTw
    SongDetail:
      required:
      - link
      - releaseDate
      - text
      type: object
      properties:
        releaseDate:
          type: string
          example: 16.07.2006
        text:
          type: string
          example: "Ooh baby, don't you know I suffer?\\nOoh baby, can you hear me moan?\\nYou caught me under false pretenses\\nHow long before you let me go?\\n\\nOoh\\nYou set my soul alight\\nOoh\\nYou set my soul alight"
        link:
          type: string
          example: https://www.youtube.com/watch?v=Xsp3_a-PMTw
    SongLyric:
      type: object
      properties:
        verses:
          type: array
          items:
            type: string
            example: "[\"Ala\",\"la\"]"
    SongID:
      type: object
      properties:
        ID:
          type: integer
          example: 1



